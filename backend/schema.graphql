### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Message {
  id: Int
  roomId: Int
  text: String
  userId: Int
}

input MessageCreateManyWithoutRoomInput {
  connect: [MessageWhereUniqueInput!]
  connectOrCreate: [MessageCreateOrConnectWithoutroomInput!]
  create: [MessageCreateWithoutRoomInput!]
}

input MessageCreateManyWithoutUserInput {
  connect: [MessageWhereUniqueInput!]
  connectOrCreate: [MessageCreateOrConnectWithoutuserInput!]
  create: [MessageCreateWithoutUserInput!]
}

input MessageCreateOrConnectWithoutroomInput {
  create: MessageCreateWithoutRoomInput!
  where: MessageWhereUniqueInput!
}

input MessageCreateOrConnectWithoutuserInput {
  create: MessageCreateWithoutUserInput!
  where: MessageWhereUniqueInput!
}

input MessageCreateWithoutRoomInput {
  text: String!
  user: UserCreateOneWithoutMessageInput!
}

input MessageCreateWithoutUserInput {
  room: RoomCreateOneWithoutMessageInput!
  text: String!
}

input MessageWhereUniqueInput {
  id: Int
}

type Mutation {
  addUserToRoom(roomId: Int!, userId: Int!): UsersInRoom
  createRoom(name: String!): Room
  signupUser(data: UserCreateInput!): User
}

type Profile {
  bio: String
  id: Int
}

input ProfileCreateOneWithoutUserInput {
  connect: ProfileWhereUniqueInput
  connectOrCreate: ProfileCreateOrConnectWithoutuserInput
  create: ProfileCreateWithoutUserInput
}

input ProfileCreateOrConnectWithoutuserInput {
  create: ProfileCreateWithoutUserInput!
  where: ProfileWhereUniqueInput!
}

input ProfileCreateWithoutUserInput {
  bio: String
}

input ProfileWhereUniqueInput {
  id: Int
  userId: Int
}

type Query {
  allMessages: [Message]
  allRooms: [Room]
  allUsers: [User]
  roomById(id: Int!): Room
  userById(id: Int!): User
}

type Room {
  id: Int
  messages: [Message]
  name: String
  userList: [UsersInRoom]
}

input RoomCreateOneWithoutMessageInput {
  connect: RoomWhereUniqueInput
  connectOrCreate: RoomCreateOrConnectWithoutMessageInput
  create: RoomCreateWithoutMessageInput
}

input RoomCreateOneWithoutUsersInRoomInput {
  connect: RoomWhereUniqueInput
  connectOrCreate: RoomCreateOrConnectWithoutUsersInRoomInput
  create: RoomCreateWithoutUsersInRoomInput
}

input RoomCreateOrConnectWithoutMessageInput {
  create: RoomCreateWithoutMessageInput!
  where: RoomWhereUniqueInput!
}

input RoomCreateOrConnectWithoutUsersInRoomInput {
  create: RoomCreateWithoutUsersInRoomInput!
  where: RoomWhereUniqueInput!
}

input RoomCreateWithoutMessageInput {
  name: String!
  UsersInRoom: UsersInRoomCreateManyWithoutRoomInput
}

input RoomCreateWithoutUsersInRoomInput {
  Message: MessageCreateManyWithoutRoomInput
  name: String!
}

input RoomWhereUniqueInput {
  id: Int
}

type User {
  email: String
  id: Int
  messages: [Message]
  name: String
  profile: [Profile]
}

input UserCreateInput {
  email: String!
  Message: MessageCreateManyWithoutUserInput
  name: String
  profile: ProfileCreateOneWithoutUserInput
  UsersInRoom: UsersInRoomCreateManyWithoutUserInput
}

input UserCreateOneWithoutMessageInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutMessageInput
  create: UserCreateWithoutMessageInput
}

input UserCreateOneWithoutUsersInRoomInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutUsersInRoomInput
  create: UserCreateWithoutUsersInRoomInput
}

input UserCreateOrConnectWithoutMessageInput {
  create: UserCreateWithoutMessageInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutUsersInRoomInput {
  create: UserCreateWithoutUsersInRoomInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutMessageInput {
  email: String!
  name: String
  profile: ProfileCreateOneWithoutUserInput
  UsersInRoom: UsersInRoomCreateManyWithoutUserInput
}

input UserCreateWithoutUsersInRoomInput {
  email: String!
  Message: MessageCreateManyWithoutUserInput
  name: String
  profile: ProfileCreateOneWithoutUserInput
}

type UsersInRoom {
  room: Room
  roomId: Int
  user: User
  userId: Int
}

input UsersInRoomCreateManyWithoutRoomInput {
  connect: [UsersInRoomWhereUniqueInput!]
  connectOrCreate: [UsersInRoomCreateOrConnectWithoutroomInput!]
  create: [UsersInRoomCreateWithoutRoomInput!]
}

input UsersInRoomCreateManyWithoutUserInput {
  connect: [UsersInRoomWhereUniqueInput!]
  connectOrCreate: [UsersInRoomCreateOrConnectWithoutuserInput!]
  create: [UsersInRoomCreateWithoutUserInput!]
}

input UsersInRoomCreateOrConnectWithoutroomInput {
  create: UsersInRoomCreateWithoutRoomInput!
  where: UsersInRoomWhereUniqueInput!
}

input UsersInRoomCreateOrConnectWithoutuserInput {
  create: UsersInRoomCreateWithoutUserInput!
  where: UsersInRoomWhereUniqueInput!
}

input UsersInRoomCreateWithoutRoomInput {
  user: UserCreateOneWithoutUsersInRoomInput!
}

input UsersInRoomCreateWithoutUserInput {
  room: RoomCreateOneWithoutUsersInRoomInput!
}

input UsersInRoomUserIdRoomIdCompoundUniqueInput {
  roomId: Int!
  userId: Int!
}

input UsersInRoomWhereUniqueInput {
  userId_roomId: UsersInRoomUserIdRoomIdCompoundUniqueInput
}

input UserWhereUniqueInput {
  email: String
  id: Int
}
